import discord
from discord import app_commands
import os
from dotenv import load_dotenv
from urllib.parse import quote

# Load environment variables
load_dotenv()

# Configuration from environment variables
DISCORD_TOKEN = os.getenv('DISCORD_TOKEN')
BANK_ID = os.getenv('BANK_ID', '970436')
ACCOUNT_NO = os.getenv('ACCOUNT_NO')
ACCOUNT_NAME = os.getenv('ACCOUNT_NAME')

# Th√™m h·∫±ng s·ªë cho ROLE_ID
CUSTOMER_ROLE_ID = 1334194617322831935

# Th√™m h·∫±ng s·ªë cho LOG_CHANNEL_ID
LOG_CHANNEL_ID = 1336368295363874909


def generate_vietqr_content(amount: float, message: str = ""):
    """
    Generate VietQR content with proper URL encoding
    """
    # Ensure all components are properly encoded
    encoded_account_name = quote(ACCOUNT_NAME)
    encoded_message = quote(message)

    # Format according to VietQR standard
    qr_url = f"https://img.vietqr.io/image/{BANK_ID}-{ACCOUNT_NO}-compact.png"
    qr_url += f"?amount={int(amount)}"
    if message:
        qr_url += f"&addInfo={encoded_message}"
    qr_url += f"&accountName={encoded_account_name}"

    print(f"Generated QR URL: {qr_url}")  # For debugging
    return qr_url


class QRPaymentBot(discord.Client):
    def __init__(self):
        intents = discord.Intents.default()
        super().__init__(intents=intents)
        self.tree = app_commands.CommandTree(self)

    async def setup_hook(self):
        try:
            print("Synchronizing commands...")
            await self.tree.sync()
            print("Command synchronization successful!")
        except Exception as e:
            print(f"Error synchronizing commands: {e}")


bot = QRPaymentBot()


@bot.tree.command(name="thanhtoan", description="T·∫°o m√£ QR thanh to√°n ng√¢n h√†ng")
@app_commands.describe(
    amount="S·ªë l∆∞·ª£ng key c·∫ßn thanh to√°n",
)
async def generate_qr(
    interaction: discord.Interaction,
    amount: int,
):
    try:
        # Validate key amount
        if amount < 5:
            await interaction.response.send_message("‚ùå S·ªë l∆∞·ª£ng key ph·∫£i l·ªõn h∆°n ho·∫∑c b·∫±ng 5!")
            return

        # Calculate price based on quantity
        total_price = 250000 * amount if amount >= 10 else 275000 * amount

        await interaction.response.defer()

        # Generate VietQR URL with encoded parameters
        message = f"{interaction.user.name}"
        qr_url = generate_vietqr_content(total_price, message)

        # Create embed with payment information
        embed = discord.Embed(
            title="üí≥ Th√¥ng tin thanh to√°n",
            description=f"**S·ªë l∆∞·ª£ng key:** {amount} key\n**ƒê∆°n gi√°:** {250000 if amount >= 10 else 275000:,} VNƒê/key",
            color=0x00ff00  # M√†u xanh l√° c√¢y t∆∞∆°i s√°ng
        )

        # Th√¥ng tin ng√¢n h√†ng
        embed.add_field(
            name="üè¶ Th√¥ng tin t√†i kho·∫£n",
            value=f"```\nNg√¢n h√†ng: BIDV\nCh·ªß TK: {ACCOUNT_NAME}\nS·ªë TK: {ACCOUNT_NO}\n```",
            inline=False
        )

        # Th√¥ng tin thanh to√°n
        embed.add_field(
            name="üí∞ Chi ti·∫øt thanh to√°n",
            value=f"```\nT·ªïng ti·ªÅn: {total_price:,} VNƒê\nN·ªôi dung CK: {message}\n```",
            inline=False
        )

        # Set the encoded QR URL
        try:
            embed.set_image(url=qr_url)
        except Exception as e:
            print(f"Error setting image URL: {e}")
            await interaction.followup.send("‚ùå Kh√¥ng th·ªÉ t·∫°o m√£ QR. Vui l√≤ng th·ª≠ l·∫°i sau.")
            return

        embed.set_footer(text=f"Y√™u c·∫ßu b·ªüi: {interaction.user.name}")

        await interaction.followup.send(embed=embed)

    except ValueError:
        await interaction.followup.send('‚ùå Vui l√≤ng nh·∫≠p m·ªôt s·ªë h·ª£p l·ªá.')
    except Exception as e:
        print(f"Error: {e}")
        await interaction.followup.send('‚ùå C√≥ l·ªói x·∫£y ra. Vui l√≤ng th·ª≠ l·∫°i sau.')


@bot.tree.command(name="sendmsg", description="G·ª≠i tin nh·∫Øn tr·ª±c ti·∫øp ƒë·∫øn user")
@app_commands.describe(
    user="Ng∆∞·ªùi d√πng c·∫ßn g·ª≠i tin nh·∫Øn",
    message="N·ªôi dung tin nh·∫Øn c·∫ßn g·ª≠i"
)
async def send_direct_message(
    interaction: discord.Interaction,
    user: discord.Member,
    message: str
):
    try:
        await interaction.response.defer(ephemeral=True)

        try:
            # Ki·ªÉm tra v√† th√™m role cho user
            role_added = await check_and_add_role(user, CUSTOMER_ROLE_ID)
            if not role_added:
                await interaction.followup.send(
                    "‚ùå Kh√¥ng th·ªÉ th√™m role cho user. Vui l√≤ng ki·ªÉm tra l·∫°i quy·ªÅn c·ªßa bot.",
                    ephemeral=True
                )
                return

            dm_channel = await user.create_dm()

            # T√°ch chu·ªói th√†nh c√°c d√≤ng
            lines = message.split('\n')
            formatted_lines = []

            # X·ª≠ l√Ω t·ª´ng d√≤ng ri√™ng bi·ªát
            for line in lines:
                if line.strip():  # Ch·ªâ x·ª≠ l√Ω c√°c d√≤ng kh√¥ng tr·ªëng
                    formatted_lines.append(line.strip())

            # Join c√°c d√≤ng th√†nh text
            accounts_text = '\n'.join(formatted_lines)

            # Ki·ªÉm tra s·ªë l∆∞·ª£ng key th·ª±c t·∫ø
            actual_count = len(formatted_lines)
            if actual_count != len(message.strip().split('\n')):
                await interaction.followup.send(
                    f"‚ö†Ô∏è C·∫£nh b√°o: S·ªë l∆∞·ª£ng key kh√¥ng kh·ªõp. ƒê√£ x·ª≠ l√Ω {actual_count} key.",
                    ephemeral=True
                )

            # T·∫°o embed ƒë·ªÉ g·ª≠i cho user
            user_embed = discord.Embed(
                title="üîë Th√¥ng tin t√†i kho·∫£n",
                description=f"Format: `username - password`\nS·ªë l∆∞·ª£ng: `{len(formatted_lines)} key`\n\n" +
                f"```\n{accounts_text}\n```" if formatted_lines else "",
                color=discord.Color.blue()
            )
            user_embed.set_footer(
                text="L∆∞u √Ω: M·ªói d√≤ng l√† m·ªôt t√†i kho·∫£n v√† m·∫≠t kh·∫©u")

            # G·ª≠i embed cho user
            await dm_channel.send(embed=user_embed)

            # T·∫°o embed ƒë·ªÉ ghi log
            log_embed = discord.Embed(
                title="üìù Log G·ª≠i Key",
                description="Chi ti·∫øt giao d·ªãch:",
                color=discord.Color.green(),
                timestamp=interaction.created_at
            )
            log_embed.add_field(
                name="Ng∆∞·ªùi g·ª≠i",
                value=f"{interaction.user.mention} (`{interaction.user.name}`)",
                inline=True
            )
            log_embed.add_field(
                name="Ng∆∞·ªùi nh·∫≠n",
                value=f"{user.mention} (`{user.name}`)",
                inline=True
            )
            log_embed.add_field(
                name="S·ªë l∆∞·ª£ng key",
                value=f"`{len(formatted_lines)} key`",
                inline=True
            )
            log_embed.add_field(
                name="Danh s√°ch key",
                value=f"```\n{accounts_text}\n```",
                inline=False
            )

            # G·ª≠i log v√†o channel
            log_channel = bot.get_channel(LOG_CHANNEL_ID)
            if log_channel:
                await log_channel.send(embed=log_embed)
            else:
                print(f"Kh√¥ng t√¨m th·∫•y channel log v·ªõi ID {LOG_CHANNEL_ID}")

            await interaction.followup.send(
                f"‚úÖ ƒê√£ g·ª≠i tin nh·∫Øn ƒë·∫øn {user.name} v√† th√™m role!",
                ephemeral=True
            )
        except discord.Forbidden:
            await interaction.followup.send(
                f"‚ùå Kh√¥ng th·ªÉ g·ª≠i tin nh·∫Øn ƒë·∫øn {user.name}. Ng∆∞·ªùi d√πng c√≥ th·ªÉ ƒë√£ ch·∫∑n DM.",
                ephemeral=True
            )
        except Exception as e:
            print(f"Error sending DM: {e}")
            await interaction.followup.send(
                "‚ùå C√≥ l·ªói x·∫£y ra khi g·ª≠i tin nh·∫Øn.",
                ephemeral=True
            )

    except Exception as e:
        print(f"Error: {e}")
        await interaction.followup.send(
            "‚ùå C√≥ l·ªói x·∫£y ra. Vui l√≤ng th·ª≠ l·∫°i sau.",
            ephemeral=True
        )


@bot.event
async def on_ready():
    print(f'ü§ñ {bot.user} ƒë√£ s·∫µn s√†ng!')

# Th√™m h√†m ki·ªÉm tra v√† th√™m role


async def check_and_add_role(member: discord.Member, role_id: int):
    """
    Ki·ªÉm tra v√† th√™m role cho member n·∫øu ch∆∞a c√≥
    """
    try:
        # L·∫•y role t·ª´ ID
        role = member.guild.get_role(role_id)
        if not role:
            print(f"Kh√¥ng t√¨m th·∫•y role v·ªõi ID {role_id}")
            return False

        # Ki·ªÉm tra xem member ƒë√£ c√≥ role ch∆∞a
        if role not in member.roles:
            await member.add_roles(role)
            print(f"ƒê√£ th√™m role {role.name} cho {member.name}")
            return True
        return True
    except Exception as e:
        print(f"L·ªói khi th√™m role: {e}")
        return False

# Run the bot
bot.run(DISCORD_TOKEN)
