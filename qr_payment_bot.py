import discord
from discord import app_commands
import os
from dotenv import load_dotenv
from urllib.parse import quote

# Load environment variables
load_dotenv()

# Configuration from environment variables
DISCORD_TOKEN = os.getenv('DISCORD_TOKEN')
BANK_ID = os.getenv('BANK_ID', '970436')
ACCOUNT_NO = os.getenv('ACCOUNT_NO')
ACCOUNT_NAME = os.getenv('ACCOUNT_NAME')

def generate_vietqr_content(amount: float, message: str = ""):
    """
    Generate VietQR content with proper URL encoding
    """
    # Ensure all components are properly encoded
    encoded_account_name = quote(ACCOUNT_NAME)
    encoded_message = quote(message)
    
    # Format according to VietQR standard
    qr_url = f"https://img.vietqr.io/image/{BANK_ID}-{ACCOUNT_NO}-compact.png"
    qr_url += f"?amount={int(amount)}"
    if message:
        qr_url += f"&addInfo={encoded_message}"
    qr_url += f"&accountName={encoded_account_name}"
    
    print(f"Generated QR URL: {qr_url}")  # For debugging
    return qr_url

class QRPaymentBot(discord.Client):
    def __init__(self):
        intents = discord.Intents.default()
        super().__init__(intents=intents)
        self.tree = app_commands.CommandTree(self)

    async def setup_hook(self):
        try:
            print("Synchronizing commands...")
            await self.tree.sync()
            print("Command synchronization successful!")
        except Exception as e:
            print(f"Error synchronizing commands: {e}")

bot = QRPaymentBot()

@bot.tree.command(name="thanhtoan", description="T·∫°o m√£ QR thanh to√°n ng√¢n h√†ng")
@app_commands.describe(
    amount="S·ªë l∆∞·ª£ng key c·∫ßn thanh to√°n",
)
async def generate_qr(
    interaction: discord.Interaction,
    amount: int,
):
    try:
        # Validate key amount
        if amount < 5:
            await interaction.response.send_message("‚ùå S·ªë l∆∞·ª£ng key ph·∫£i l·ªõn h∆°n ho·∫∑c b·∫±ng 5!")
            return

        # Calculate price based on quantity
        total_price = 250000 * amount if amount >= 10 else 275000 * amount

        await interaction.response.defer()

        # Generate VietQR URL with encoded parameters
        message = f"{interaction.user.name}"
        qr_url = generate_vietqr_content(total_price, message)

        # Create embed with payment information
        embed = discord.Embed(
            title="üí≥ Th√¥ng tin thanh to√°n",
            description=f"**S·ªë l∆∞·ª£ng key:** {amount} key\n**ƒê∆°n gi√°:** {250000 if amount >= 10 else 275000:,} VNƒê/key",
            color=0x00ff00  # M√†u xanh l√° c√¢y t∆∞∆°i s√°ng
        )

        # Th√¥ng tin ng√¢n h√†ng
        embed.add_field(
            name="üè¶ Th√¥ng tin t√†i kho·∫£n",
            value=f"```\nNg√¢n h√†ng: BIDV\nCh·ªß TK: {ACCOUNT_NAME}\nS·ªë TK: {ACCOUNT_NO}\n```",
            inline=False
        )

        # Th√¥ng tin thanh to√°n
        embed.add_field(
            name="üí∞ Chi ti·∫øt thanh to√°n",
            value=f"```\nT·ªïng ti·ªÅn: {total_price:,} VNƒê\nN·ªôi dung CK: {message}\n```",
            inline=False
        )
        
        # Set the encoded QR URL
        try:
            embed.set_image(url=qr_url)
        except Exception as e:
            print(f"Error setting image URL: {e}")
            await interaction.followup.send("‚ùå Kh√¥ng th·ªÉ t·∫°o m√£ QR. Vui l√≤ng th·ª≠ l·∫°i sau.")
            return

        embed.set_footer(text=f"Y√™u c·∫ßu b·ªüi: {interaction.user.name}")

        await interaction.followup.send(embed=embed)

    except ValueError:
        await interaction.followup.send('‚ùå Vui l√≤ng nh·∫≠p m·ªôt s·ªë h·ª£p l·ªá.')
    except Exception as e:
        print(f"Error: {e}")
        await interaction.followup.send('‚ùå C√≥ l·ªói x·∫£y ra. Vui l√≤ng th·ª≠ l·∫°i sau.')

@bot.event
async def on_ready():
    print(f'ü§ñ {bot.user} ƒë√£ s·∫µn s√†ng!')

# Run the bot
bot.run(DISCORD_TOKEN)